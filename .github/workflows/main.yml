# name: Checkmarx One Scan
# on:
#   push:
#     branches:
#       - main
#       - master
#       - dev
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Checkmarx One CLI Action
#         uses: checkmarx/ast-github-action@main #Github Action version
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/ 
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}

##########
# name: Checkmarx → GitHub Code Scanning

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write   # ต้องมีเพื่ออัปโหลด SARIF

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) รัน Checkmarx One และให้สร้างไฟล์ SARIF
#       - name: Checkmarx One CLI
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           # จุดสำคัญ: สั่ง CLI ให้สร้างรายงาน SARIF ที่ชื่อ cx_result.sarif ไว้ในรูทของ workspace
#           additional_params: >-
#             --report-format sarif
#             --output-path .
#             --output-name cx_result

#       # 2) อัปโหลดไฟล์ SARIF ไปที่ GitHub Code Scanning
#       - name: Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       # 3) อัปโหลดไฟล์ SARIF เป็น Artifact (ให้โหลดลงเครื่องได้)
#       - name: Upload Checkmarx SARIF (artifact)
#         if: ${{ always() && hashFiles('cx_result.sarif') != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SARIF-Checkmarx
#           path: cx_result.sarif
#           retention-days: 30


##############
# name: Checkmarx → GitHub Code Scanning + SBOM (CycloneDX & SPDX)

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write   # สำหรับอัปโหลด SARIF เข้าหน้า Code scanning

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) สแกนและสร้าง SARIF สำหรับ GitHub Code Scanning
#       - name: Checkmarx One CLI (SARIF)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --report-format sarif
#             --output-path .
#             --output-name cx_result

#       - name: Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       - name: Upload Checkmarx SARIF (artifact)
#         if: ${{ always() && hashFiles('cx_result.sarif') != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SARIF-Checkmarx
#           path: cx_result.sarif
#           retention-days: 30

#   # 2) สร้าง SBOM สองฟอร์แมตด้วย matrix: CycloneDxJson และ SpdxJson
#   sbom:
#     needs: checkmarx
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         fmt: [ CycloneDxJson, SpdxJson ]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Checkmarx One CLI (SBOM - ${{ matrix.fmt }})
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --report-format sbom
#             --report-sbom-format ${{ matrix.fmt }}
#             --output-path .
#             --output-name sbom-${{ matrix.fmt }}

#       - name: Upload SBOM (artifact) - ${{ matrix.fmt }}
#         if: ${{ always() && hashFiles(format('sbom-{0}.json', matrix.fmt)) != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SBOM-${{ matrix.fmt }}
#           path: sbom-${{ matrix.fmt }}.json
#           retention-days: 30

############
# name: Checkmarx → Code Scanning + SBOM

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) สแกนและสร้าง SARIF
#       - name: Checkmarx One CLI (SARIF)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sarif
#             --output-path $GITHUB_WORKSPACE
#             --output-name cx_result

#       - name: Post Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       # 2) สร้าง SBOM: CycloneDX JSON
#       - name: SBOM (CycloneDX JSON)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sbom
#             --report-sbom-format CycloneDxJson
#             --output-path $GITHUB_WORKSPACE
#             --output-name sbom-cyclonedx

#       # 3) สร้าง SBOM: SPDX JSON
#       - name: SBOM (SPDX JSON)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sbom
#             --report-sbom-format SpdxJson
#             --output-path $GITHUB_WORKSPACE
#             --output-name sbom-spdx

#       # 4) แสดงไฟล์ที่ได้ (เพื่อดีบั๊กชื่อ/พาธ)
#       - name: List generated files
#         run: |
#           echo "PWD: $(pwd)"
#           ls -la
#           echo "---- find sbom files ----"
#           find . -maxdepth 2 -type f -name "sbom-*" -o -name "cx_result.*" -print

#       # 5) อัปโหลด Artifact (ไม่ต้องใช้ hashFiles, ใช้ always + wildcard)
#       # - name: Upload SBOM & SARIF Artifacts
#       #   if: ${{ always() }}
#       #   uses: actions/upload-artifact@v4
#       #   with:
#       #     name: Checkmarx-Reports
#       #     path: |
#       #       cx_result.sarif
#       #       sbom-cyclonedx.json
#       #       sbom-spdx.json
#       #     retention-days: 30
#       - name: Upload SBOM & SARIF Artifacts
#         if: ${{ always() }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: Checkmarx-Reports
#           path: |
#             cx_result.sarif
#             sbom-*_sbom.json
#           retention-days: 30


name: Download Checkmarx Export & Upload Artifact

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  export-download:
    runs-on: ubuntu-latest
    steps:
      - name: Get fileUrl then download
        id: dl
        shell: bash
        run: |
          set -euo pipefail

          BASE="https://sng.ast.checkmarx.net/api/sca/export"
          EXPORT_ID="c8645112-00c3-7350-97c1-31f7db0b2cfc"
          AUTH="Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGOHhrWDZwWGtoaldCcl9GMXFVeExueE5acWlXNXhSYVNpdEQxM2Z6X01JIn0.eyJleHAiOjE3NTk4MjAzMTYsImlhdCI6MTc1OTgxODUxNiwianRpIjoib2ZydHJ0OmNmN2U0YWMyLTQ4OWQtZGQyMC03YmYzLWYyZWUzYzc1MTYyZiIsImlzcyI6Imh0dHBzOi8vc25nLmlhbS5jaGVja21hcngubmV0L2F1dGgvcmVhbG1zL25mci1mdXNpb25hZHZhbnRlYy1zZyIsImF1ZCI6WyJyZWFsbS1tYW5hZ2VtZW50IiwiYWNjb3VudCJdLCJzdWIiOiJkYmNmNTcwOC0xMDExLTQyODMtOGNjOC0xYTc0YzA2NDYwZjciLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJhc3QtYXBwIiwic2lkIjoiYzZmNTg5ZTEtOGE3OC00YzhkLTk4ZWMtMDEwYmZhMzExMmU2IiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiLCIvKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsInJlYWxtLWFkbWluIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInVtYV9wcm90ZWN0aW9uIiwibWFuYWdlLWtleXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtZ3JvdXBzIiwibWFuYWdlLWNsaWVudHMiLCJxdWVyeS1ncm91cHMiXX0sImFjY291bnQiOnsicm9sZXMiOlsidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJwcm9maWxlIGFzdC1hcGkgZW1haWwgaWFtLWFwaSByb2xlcyBncm91cHMiLCJ0ZW5hbnRfaWQiOiJzbmcuaWFtLmNoZWNrbWFyeC5uZXQ6OjE3MDVlMzRlLTliOTAtNGE0Yi1iZmEwLTVkNjMxNjgyYzQ4OCIsInRlbmFudF9uYW1lIjoibmZyLWZ1c2lvbmFkdmFudGVjLXNnIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInJvbGVzIjpbIm1hbmFnZS11c2VycyIsIm9mZmxpbmVfYWNjZXNzIiwiZGVmYXVsdC1yb2xlcy1uZnItZnVzaW9uYWR2YW50ZWMtc2ciLCJtYW5hZ2Uta2V5cyIsIm1hbmFnZS1ncm91cHMiLCJ1bWFfYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwidXNlciIsImlhbS1hZG1pbiJdLCJldWxhLWFjY2VwdGVkIjp0cnVlLCJncm91cHMiOlsiNzMyNDY4ZDUtMDAwMi00MWEzLThiYTctZjIyYzE0MmQ4ZGNmIiwiZmRkMWJlYjAtYWY2MS00ZGExLWExMjktMDdjZThhOWU5MGU2IiwiOWI4ZWMzMTktZDY2My00OWU5LTlhNGUtZDcwZDEwYTc3NzZmIiwiOTM3MGNlMGItMjJkZC00ZTc4LWIzZGYtNWZhMjViYjk2MTk3IiwiMDVhNTFlYTQtNzFkMC00YTEzLTkyYzMtNjY2MGE4ZTg3ZGRjIl19.qVyt4rpfELiL-mFzSHQzE2jv-EGY0sj5h6wxxXaBFP3oW-ZIGZpJZdFwlPfR4hHPbREELxgneg0z92ID0O_9d5mDJkgX8ABncDNQvdv7HJeHnfBeAC2J3Qq88GSlIMeCOCnb03o0GtBWXQds0_5Ypb7JcW3nvxWNapEDbBh4c2YbcwmLIwp8mZ0xjAYAPWnuQe4OvD7nF5jmFqcbVy5KxyZDMPLaGPamqlKKrswHckPKnbKXKp_s0iquERojqFeAcWWXWzNfu4hn5eMyo9OgHaYvyrQ4epVpL5iL-IzWdUZ7vkLJ_MgA51oye6V5syxSR6Z7QMI3j-A_tkYxFzDfVA"

          echo "→ Querying export request for fileUrl…"
          JSON="$(curl -fsSL -G \
            -H "$AUTH" \
            --data-urlencode "exportId=${EXPORT_ID}" \
            "$BASE/requests")"

          echo "Raw JSON:"
          echo "$JSON"

          FILE_URL="$(printf '%s' "$JSON" | jq -r '.fileUrl // empty')"

          if [ -z "$FILE_URL" ] || [ "$FILE_URL" = "null" ]; then
            echo "No fileUrl yet (status not Completed)."
            exit 2
          fi

          echo "→ Downloading from fileUrl: $FILE_URL"
          # บาง tenant ต้อง Accept เป็น octet-stream ถึงจะผ่าน auth proxy
          curl -fSL -OJ \
            -H "$AUTH" \
            -H "Accept: application/octet-stream" \
            --retry 5 --retry-delay 3 \
            "$FILE_URL"

          FILE="$(ls -1t | head -n1)"
          [ -s "$FILE" ] || { echo "Downloaded file is empty"; exit 3; }
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        if: steps.dl.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: checkmarx-export
          path: ${{ steps.dl.outputs.file }}
          retention-days: 14

