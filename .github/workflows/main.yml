# name: Checkmarx One Scan
# on:
#   push:
#     branches:
#       - main
#       - master
#       - dev
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Checkmarx One CLI Action
#         uses: checkmarx/ast-github-action@main #Github Action version
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/ 
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}

##########
# name: Checkmarx → GitHub Code Scanning

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write   # ต้องมีเพื่ออัปโหลด SARIF

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) รัน Checkmarx One และให้สร้างไฟล์ SARIF
#       - name: Checkmarx One CLI
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           # จุดสำคัญ: สั่ง CLI ให้สร้างรายงาน SARIF ที่ชื่อ cx_result.sarif ไว้ในรูทของ workspace
#           additional_params: >-
#             --report-format sarif
#             --output-path .
#             --output-name cx_result

#       # 2) อัปโหลดไฟล์ SARIF ไปที่ GitHub Code Scanning
#       - name: Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       # 3) อัปโหลดไฟล์ SARIF เป็น Artifact (ให้โหลดลงเครื่องได้)
#       - name: Upload Checkmarx SARIF (artifact)
#         if: ${{ always() && hashFiles('cx_result.sarif') != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SARIF-Checkmarx
#           path: cx_result.sarif
#           retention-days: 30


##############
# name: Checkmarx → GitHub Code Scanning + SBOM (CycloneDX & SPDX)

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write   # สำหรับอัปโหลด SARIF เข้าหน้า Code scanning

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) สแกนและสร้าง SARIF สำหรับ GitHub Code Scanning
#       - name: Checkmarx One CLI (SARIF)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --report-format sarif
#             --output-path .
#             --output-name cx_result

#       - name: Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       - name: Upload Checkmarx SARIF (artifact)
#         if: ${{ always() && hashFiles('cx_result.sarif') != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SARIF-Checkmarx
#           path: cx_result.sarif
#           retention-days: 30

#   # 2) สร้าง SBOM สองฟอร์แมตด้วย matrix: CycloneDxJson และ SpdxJson
#   sbom:
#     needs: checkmarx
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         fmt: [ CycloneDxJson, SpdxJson ]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Checkmarx One CLI (SBOM - ${{ matrix.fmt }})
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --report-format sbom
#             --report-sbom-format ${{ matrix.fmt }}
#             --output-path .
#             --output-name sbom-${{ matrix.fmt }}

#       - name: Upload SBOM (artifact) - ${{ matrix.fmt }}
#         if: ${{ always() && hashFiles(format('sbom-{0}.json', matrix.fmt)) != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SBOM-${{ matrix.fmt }}
#           path: sbom-${{ matrix.fmt }}.json
#           retention-days: 30

############
# name: Checkmarx → Code Scanning + SBOM

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) สแกนและสร้าง SARIF
#       - name: Checkmarx One CLI (SARIF)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sarif
#             --output-path $GITHUB_WORKSPACE
#             --output-name cx_result

#       - name: Post Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       # 2) สร้าง SBOM: CycloneDX JSON
#       - name: SBOM (CycloneDX JSON)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sbom
#             --report-sbom-format CycloneDxJson
#             --output-path $GITHUB_WORKSPACE
#             --output-name sbom-cyclonedx

#       # 3) สร้าง SBOM: SPDX JSON
#       - name: SBOM (SPDX JSON)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sbom
#             --report-sbom-format SpdxJson
#             --output-path $GITHUB_WORKSPACE
#             --output-name sbom-spdx

#       # 4) แสดงไฟล์ที่ได้ (เพื่อดีบั๊กชื่อ/พาธ)
#       - name: List generated files
#         run: |
#           echo "PWD: $(pwd)"
#           ls -la
#           echo "---- find sbom files ----"
#           find . -maxdepth 2 -type f -name "sbom-*" -o -name "cx_result.*" -print

#       # 5) อัปโหลด Artifact (ไม่ต้องใช้ hashFiles, ใช้ always + wildcard)
#       # - name: Upload SBOM & SARIF Artifacts
#       #   if: ${{ always() }}
#       #   uses: actions/upload-artifact@v4
#       #   with:
#       #     name: Checkmarx-Reports
#       #     path: |
#       #       cx_result.sarif
#       #       sbom-cyclonedx.json
#       #       sbom-spdx.json
#       #     retention-days: 30
#       - name: Upload SBOM & SARIF Artifacts
#         if: ${{ always() }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: Checkmarx-Reports
#           path: |
#             cx_result.sarif
#             sbom-*_sbom.json
#           retention-days: 30


name: Download Checkmarx Export & Upload Artifact



on:
  push:
    branches: [ main ]
        inputs:
      token:
        description: "Bearer token (SCA API token; scope=sca_api)"
        required: true
      # ใช้ exportId ที่มีอยู่แล้ว หรือใส่ scanId เพื่อสร้างใหม่
      export_id:
        description: "Existing exportId (optional)"
        required: false
      scan_id:
        description: "scanId to generate a new export (optional if export_id provided)"
        required: false
      file_format:
        description: "File format (ScanReportPdf/ScanReportJson/ScanReportCsv/ScanReportXml/CycloneDxJson/CycloneDxXml/SpdxJson)"
        required: false
        default: "ScanReportPdf"
  workflow_dispatch:
    inputs:
      token:
        description: "Bearer token (SCA API token; scope=sca_api)"
        required: true
      # ใช้ exportId ที่มีอยู่แล้ว หรือใส่ scanId เพื่อสร้างใหม่
      export_id:
        description: "Existing exportId (optional)"
        required: false
      scan_id:
        description: "scanId to generate a new export (optional if export_id provided)"
        required: false
      file_format:
        description: "File format (ScanReportPdf/ScanReportJson/ScanReportCsv/ScanReportXml/CycloneDxJson/CycloneDxXml/SpdxJson)"
        required: false
        default: "ScanReportPdf"

jobs:
  export-and-download:
    runs-on: ubuntu-latest
    steps:
      - name: Export & download
        id: dl
        shell: bash
        env:
          BASE: "https://sng.ast.checkmarx.net/api/sca/export"
          TOKEN: ${{ github.event.inputs.token }}
          EXPORT_ID: ${{ github.event.inputs.export_id }}
          SCAN_ID: ${{ github.event.inputs.scan_id }}
          FILE_FORMAT: ${{ github.event.inputs.file_format }}
        run: |
          set -euo pipefail
          AUTH="Authorization: Bearer ${TOKEN}"

          # ถ้าไม่มี EXPORT_ID แต่มี SCAN_ID → สร้าง export ใหม่ (POST /requests)
          if [[ -z "${EXPORT_ID:-}" && -n "${SCAN_ID:-}" ]]; then
            echo "→ Creating new export for scanId=${SCAN_ID} in format=${FILE_FORMAT}"
            REQ_PAYLOAD=$(jq -nc --arg scan "$SCAN_ID" --arg fmt "$FILE_FORMAT" \
              '{ScanId:$scan, FileFormat:$fmt}')
            CREATE_JSON="$(curl -fsSL -X POST "$BASE/requests" \
              -H "$AUTH" -H "Content-Type: application/json" \
              --data "$REQ_PAYLOAD")" || { echo "Create export failed"; exit 1; }

            echo "Create response: $CREATE_JSON"
            EXPORT_ID="$(printf '%s' "$CREATE_JSON" | jq -r '.exportId // empty')"
            if [[ -z "$EXPORT_ID" || "$EXPORT_ID" == "null" ]]; then
              echo "No exportId returned from create step"; exit 1
            fi
          fi

          if [[ -z "${EXPORT_ID:-}" ]]; then
            echo "Need either export_id or scan_id"; exit 1
          fi

          echo "→ Polling status for exportId=$EXPORT_ID"
          ATTEMPTS=120   # รวม ~10 นาทีถ้า interval=5s
          SLEEP=5
          FILE_URL=""
          STATUS=""

          for i in $(seq 1 $ATTEMPTS); do
            JSON="$(curl -fsSL -G -H "$AUTH" --data-urlencode "exportId=${EXPORT_ID}" "$BASE/requests")" || {
              echo "GET /requests 401/403? ตรวจสอบว่าเป็น SCA token (scope=sca_api)"; exit 22; }
            STATUS="$(printf '%s' "$JSON" | jq -r '.status // empty')"
            FILE_URL="$(printf '%s' "$JSON" | jq -r '.fileUrl // empty')"
            echo "status=$STATUS"
            if [[ "$STATUS" == "Completed" && -n "$FILE_URL" && "$FILE_URL" != "null" ]]; then
              break
            fi
            sleep "$SLEEP"
          done

          if [[ "$STATUS" != "Completed" || -z "$FILE_URL" || "$FILE_URL" == "null" ]]; then
            echo "Report not ready (status=$STATUS)."; exit 2
          fi

          echo "→ Downloading from fileUrl: $FILE_URL"
          curl -fSL -OJ \
            -H "$AUTH" \
            -H "Accept: application/octet-stream" \
            --retry 5 --retry-delay 3 \
            "$FILE_URL"

          FILE="$(ls -1t | head -n1)"
          [[ -s "$FILE" ]] || { echo "Downloaded file is empty"; exit 3; }
          echo "file=$FILE" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: checkmarx-sca-export
          path: ${{ steps.dl.outputs.file }}
          retention-days: 14

