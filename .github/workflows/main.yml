# name: Checkmarx One Scan
# on:
#   push:
#     branches:
#       - main
#       - master
#       - dev
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Checkmarx One CLI Action
#         uses: checkmarx/ast-github-action@main #Github Action version
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/ 
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}

##########
# name: Checkmarx → GitHub Code Scanning

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write   # ต้องมีเพื่ออัปโหลด SARIF

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) รัน Checkmarx One และให้สร้างไฟล์ SARIF
#       - name: Checkmarx One CLI
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           # จุดสำคัญ: สั่ง CLI ให้สร้างรายงาน SARIF ที่ชื่อ cx_result.sarif ไว้ในรูทของ workspace
#           additional_params: >-
#             --report-format sarif
#             --output-path .
#             --output-name cx_result

#       # 2) อัปโหลดไฟล์ SARIF ไปที่ GitHub Code Scanning
#       - name: Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       # 3) อัปโหลดไฟล์ SARIF เป็น Artifact (ให้โหลดลงเครื่องได้)
#       - name: Upload Checkmarx SARIF (artifact)
#         if: ${{ always() && hashFiles('cx_result.sarif') != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SARIF-Checkmarx
#           path: cx_result.sarif
#           retention-days: 30


##############
# name: Checkmarx → GitHub Code Scanning + SBOM (CycloneDX & SPDX)

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write   # สำหรับอัปโหลด SARIF เข้าหน้า Code scanning

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) สแกนและสร้าง SARIF สำหรับ GitHub Code Scanning
#       - name: Checkmarx One CLI (SARIF)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --report-format sarif
#             --output-path .
#             --output-name cx_result

#       - name: Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       - name: Upload Checkmarx SARIF (artifact)
#         if: ${{ always() && hashFiles('cx_result.sarif') != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SARIF-Checkmarx
#           path: cx_result.sarif
#           retention-days: 30

#   # 2) สร้าง SBOM สองฟอร์แมตด้วย matrix: CycloneDxJson และ SpdxJson
#   sbom:
#     needs: checkmarx
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         fmt: [ CycloneDxJson, SpdxJson ]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Checkmarx One CLI (SBOM - ${{ matrix.fmt }})
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --report-format sbom
#             --report-sbom-format ${{ matrix.fmt }}
#             --output-path .
#             --output-name sbom-${{ matrix.fmt }}

#       - name: Upload SBOM (artifact) - ${{ matrix.fmt }}
#         if: ${{ always() && hashFiles(format('sbom-{0}.json', matrix.fmt)) != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SBOM-${{ matrix.fmt }}
#           path: sbom-${{ matrix.fmt }}.json
#           retention-days: 30

############
# name: Checkmarx → Code Scanning + SBOM

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) สแกนและสร้าง SARIF
#       - name: Checkmarx One CLI (SARIF)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sarif
#             --output-path $GITHUB_WORKSPACE
#             --output-name cx_result

#       - name: Post Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       # 2) สร้าง SBOM: CycloneDX JSON
#       - name: SBOM (CycloneDX JSON)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sbom
#             --report-sbom-format CycloneDxJson
#             --output-path $GITHUB_WORKSPACE
#             --output-name sbom-cyclonedx

#       # 3) สร้าง SBOM: SPDX JSON
#       - name: SBOM (SPDX JSON)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sbom
#             --report-sbom-format SpdxJson
#             --output-path $GITHUB_WORKSPACE
#             --output-name sbom-spdx

#       # 4) แสดงไฟล์ที่ได้ (เพื่อดีบั๊กชื่อ/พาธ)
#       - name: List generated files
#         run: |
#           echo "PWD: $(pwd)"
#           ls -la
#           echo "---- find sbom files ----"
#           find . -maxdepth 2 -type f -name "sbom-*" -o -name "cx_result.*" -print

#       # 5) อัปโหลด Artifact (ไม่ต้องใช้ hashFiles, ใช้ always + wildcard)
#       # - name: Upload SBOM & SARIF Artifacts
#       #   if: ${{ always() }}
#       #   uses: actions/upload-artifact@v4
#       #   with:
#       #     name: Checkmarx-Reports
#       #     path: |
#       #       cx_result.sarif
#       #       sbom-cyclonedx.json
#       #       sbom-spdx.json
#       #     retention-days: 30
#       - name: Upload SBOM & SARIF Artifacts
#         if: ${{ always() }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: Checkmarx-Reports
#           path: |
#             cx_result.sarif
#             sbom-*_sbom.json
#           retention-days: 30



# # This is a basic GitHub Actions workflow to download a file and upload it as an artifact.
# # It is triggered on every push event to any branch in the repository.

# name: Download and Upload Artifact

# # Controls when the workflow will run.
# # The 'push' event triggers the workflow every time someone pushes a commit.
# on:
#   push:
#     branches: [ '**' ] # Triggers on push to all branches

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel.
# jobs:
#   # This workflow contains a single job called "build".
#   build:
#     # The type of runner that the job will run on.
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job.
#     steps:
#       # Step 1: We don't need to check out the code for this simple example,
#       # but it's good practice to include it if you were to interact with your repository's files.
#       # - uses: actions/checkout@v4

#       # Step 2: Download an example file using curl.
#       # We'll download the README from a public repository as an example.
#       - name: Download example file
#         run: curl -o example-file.txt https://raw.githubusercontent.com/actions/checkout/main/README.md

#       # Step 3: Use the official 'upload-artifact' action to store the downloaded file.
#       # Artifacts are files or collections of files produced during a workflow run.
#       - name: Upload example file as artifact
#         uses: actions/upload-artifact@v4
#         with:
#           # The name of the artifact to be uploaded.
#           name: downloaded-file-artifact
#           # The path to the file(s) to upload.
#           # In this case, it's the file we just downloaded.
#           path: example-file.txt

# This is a basic GitHub Actions workflow to download a file and upload it as an artifact.
# It is triggered on every push event to any branch in the repository.

# This is a basic GitHub Actions workflow to download a file and upload it as an artifact.
# It is triggered on every push event to any branch in the repository.

# This is a basic GitHub Actions workflow to download a file and upload it as an artifact.
# It is triggered on every push event to any branch in the repository.

# name: Download and Upload Artifact

# # Controls when the workflow will run.
# # The 'push' event triggers the workflow every time someone pushes a commit.
# on:
#   push:
#     branches: [ '**' ] # Triggers on push to all branches

# # A workflow run is made up of one or more jobs that can run sequentially or in parallel.
# jobs:
#   # This workflow contains a single job called "build".
#   build:
#     # The type of runner that the job will run on.
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job.
#     steps:
#       # Step 1: We don't need to check out the code for this simple example,
#       # but it's good practice to include it if you were to interact with your repository's files.
#       # - uses: actions/checkout@v4

#       # Step 2: Download a file using a Bearer Token for authentication.
#       # The token is stored as a GitHub secret to avoid exposing it in the workflow file.
#       - name: Download file with Bearer token
#         run: >
#           curl -L -o sbom.json
#           -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJGOHhrWDZwWGtoaldCcl9GMXFVeExueE5acWlXNXhSYVNpdEQxM2Z6X01JIn0.eyJleHAiOjE3NTk4MjI2MjQsImlhdCI6MTc1OTgyMDgyNCwianRpIjoib2ZydHJ0OmI3YjdhMGNmLTk3ZGItZmEwYi02NzRhLTJkZmQyOGQwMTgyOCIsImlzcyI6Imh0dHBzOi8vc25nLmlhbS5jaGVja21hcngubmV0L2F1dGgvcmVhbG1zL25mci1mdXNpb25hZHZhbnRlYy1zZyIsImF1ZCI6WyJyZWFsbS1tYW5hZ2VtZW50IiwiYWNjb3VudCJdLCJzdWIiOiJkYmNmNTcwOC0xMDExLTQyODMtOGNjOC0xYTc0YzA2NDYwZjciLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJhc3QtYXBwIiwic2lkIjoiYzZmNTg5ZTEtOGE3OC00YzhkLTk4ZWMtMDEwYmZhMzExMmU2IiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiLCIvKiJdLCJyZXNvdXJjZV9hY2Nlc3MiOnsicmVhbG0tbWFuYWdlbWVudCI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsInJlYWxtLWFkbWluIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInVtYV9wcm90ZWN0aW9uIiwibWFuYWdlLWtleXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtZ3JvdXBzIiwibWFuYWdlLWNsaWVudHMiLCJxdWVyeS1ncm91cHMiXX0sImFjY291bnQiOnsicm9sZXMiOlsidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJwcm9maWxlIGFzdC1hcGkgZW1haWwgaWFtLWFwaSByb2xlcyBncm91cHMiLCJ0ZW5hbnRfaWQiOiJzbmcuaWFtLmNoZWNrbWFyeC5uZXQ6OjE3MDVlMzRlLTliOTAtNGE0Yi1iZmEwLTVkNjMxNjgyYzQ4OCIsInRlbmFudF9uYW1lIjoibmZyLWZ1c2lvbmFkdmFudGVjLXNnIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInJvbGVzIjpbIm1hbmFnZS11c2VycyIsIm9mZmxpbmVfYWNjZXNzIiwiZGVmYXVsdC1yb2xlcy1uZnItZnVzaW9uYWR2YW50ZWMtc2ciLCJtYW5hZ2Uta2V5cyIsIm1hbmFnZS1ncm91cHMiLCJ1bWFfYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwidXNlciIsImlhbS1hZG1pbiJdLCJldWxhLWFjY2VwdGVkIjp0cnVlLCJncm91cHMiOlsiNzMyNDY4ZDUtMDAwMi00MWEzLThiYTctZjIyYzE0MmQ4ZGNmIiwiZmRkMWJlYjAtYWY2MS00ZGExLWExMjktMDdjZThhOWU5MGU2IiwiOWI4ZWMzMTktZDY2My00OWU5LTlhNGUtZDcwZDEwYTc3NzZmIiwiOTM3MGNlMGItMjJkZC00ZTc4LWIzZGYtNWZhMjViYjk2MTk3IiwiMDVhNTFlYTQtNzFkMC00YTEzLTkyYzMtNjY2MGE4ZTg3ZGRjIl0sImdyb3Vwc05hbWVzIjpbIkNoZWNrbWFyeC1EZXZlbG9wZXIiLCJMb2NhbENYR3JvdXBzMSIsIkxvY2FsQ1hHcm91cHMyIiwiS0JUR19EZXZlbG9wZXJzIiwiQ2hlY2ttYXJ4X0RldlNlY09wc0FkbWluIl0sInByZWZlcnJlZF91c2VybmFtZSI6InNvcmFraXRoQGZ1c2lvbi5jby50aCIsImNiLXVybCI6Imh0dHBzOi8vbmZyLWZ1c2lvbmFkdmFudGVjLXNnLmNvZGViYXNoaW5nLmNvbSIsImdpdmVuX25hbWUiOiJTb3Jha2l0aCIsImFzdC1iYXNlLXVybCI6Imh0dHBzOi8vc25nLmFzdC5jaGVja21hcngubmV0Iiwic2YtaWQiOiIwMDE0SzAwMDAwTURJNHJRQUgiLCJyb2xlc19hc3QiOlsiY3JlYXRlLXByb2plY3QiLCJhbmFseXRpY3Mtc2Nhbi1kYXNoYm9hcmQtdmlldyIsImRlbGV0ZS13ZWJob29rIiwiZGVsZXRlLWFwcGxpY2F0aW9uIiwidXBkYXRlLWNsb3VkLWNvbm5lY3Rpb25zIiwiZGFzdC1hZG1pbiIsImRhc3QtZGVsZXRlLXNjYW4iLCJkZWxldGUtY2xvdWQtY29ubmVjdGlvbnMiLCJjcmVhdGUtd2ViaG9vayIsImFuYWx5dGljcy1leGVjdXRpdmUtb3ZlcnZpZXctdmlldyIsInVwZGF0ZS1zY2FuIiwidXBkYXRlLXJlc3VsdC1zZXZlcml0eSIsInVwZGF0ZS1yZXN1bHQtY3VzdG9tLXN0YXRlIiwiZGVsZXRlLXByb2plY3QiLCJ1cGRhdGUtbGlua3MiLCJvcGVuLWZlYXR1cmUtcmVxdWVzdCIsImRhc3QtdXBkYXRlLXJlc3VsdC1zdGF0ZS1ub3QtZXhwbG9pdGFibGUiLCJ2aWV3LXBvbGljeS1tYW5hZ2VtZW50IiwidXBkYXRlLXJlc3VsdC1zdGF0ZS1ub3QtZXhwbG9pdGFibGUiLCJ2aWV3LWxpbmtzIiwiYXN0LXJpc2stbWFuYWdlciIsInZpZXctcXVlcmllcyIsIm1hbmFnZS1yZXBvcnRzIiwibWFuYWdlLXdlYmhvb2siLCJ1cGRhdGUtc2NoZWR1bGUtc2NhbiIsInVwZGF0ZS1ydW50aW1lLWNsb3VkIiwiY3JlYXRlLWFwcGxpY2F0aW9uIiwicXVlcmllcy1lZGl0b3IiLCJ1cGRhdGUtcXVlcnkiLCJ1cGRhdGUtcmVzdWx0LW5vdC1leHBsb2l0YWJsZSIsImRhc3QtdXBkYXRlLXNjYW4iLCJ2aWV3LWVuZ2luZXMiLCJ1cGRhdGUtcHJvamVjdCIsImNyZWF0ZS1xdWVyeSIsImRlbGV0ZS1zY2FuIiwidmlldy1jb2RlYmFzaGluZyIsImltcG9ydC1maW5kaW5ncy1leHRlcm5hbC1wbGF0Zm9ybXMiLCJkYXN0LWNyZWF0ZS1lbnZpcm9ubWVudCIsInZpZXctcHJlc2V0IiwiYWRkLW5vdGVzIiwiYWJvcnQtZGF0YS1yZXRlbnRpb24iLCJhc3NpZ24tdG8tYXBwbGljYXRpb24iLCJhc3NpZ24tcHJvamVjdC1hbGwtZ3JvdXBzIiwidmlldy13ZWJob29rcyIsImRhc3QtYWRkLW5vdGVzIiwidmlldy1hY2Nlc3MiLCJjcmVhdGUtc2NtLWNvbmZpZ3VyYXRpb24iLCJ2aWV3LXBvb2xzIiwidXBkYXRlLXNjbS1jb25maWd1cmF0aW9uIiwic2FzdC1taWdyYXRpb24iLCJ1cGRhdGUtYXBwbGljYXRpb24iLCJ2aWV3LXJ1bnRpbWUtY2xvdWQiLCJkYXN0LXVwZGF0ZS1yZXN1bHQtc2V2ZXJpdHkiLCJ1cGRhdGUtcHJvamVjdC1wYXJhbXMiLCJjcmVhdGUtcHJlc2V0IiwiZGFzdC1leHRlcm5hbC1zY2FucyIsImNyZWF0ZS1wb2xpY3ktbWFuYWdlbWVudCIsInZpZXctZmVlZGJhY2thcHAiLCJ2aWV3LWNuYXMiLCJkZWxldGUtbGlua3MiLCJtYW5hZ2UtcHJvamVjdCIsInZpZXctdGVuYW50LXBhcmFtcyIsInZpZXctc2NtLWNvbmZpZ3VyYXRpb24iLCJ2aWV3LXNjYW5zIiwiY3JlYXRlLXNjYW4iLCJ2aWV3LXByb2plY3RzIiwiY3JlYXRlLXJlc3VsdC1jdXN0b20tc3RhdGUiLCJkZWxldGUtcmVzdWx0LWN1c3RvbS1zdGF0ZSIsInZpZXctc2NoZWR1bGUtc2NhbnMiLCJhbmFseXRpY3MtZW5naW5lZXJpbmctZGFzaGJvYXJkLXZpZXciLCJ2aWV3LWF1ZGl0LXRyYWlsIiwidmlldy1yaXNrLW1hbmFnZW1lbnQiLCJhc3Qtc2Nhbm5lciIsInN0YXJ0LWRhdGEtcmV0ZW50aW9uIiwidmlldy1jbG91ZC1jb25uZWN0aW9ucyIsImNyZWF0ZS1saW5rcyIsImRlbGV0ZS1xdWVyeSIsImFkZC1wYWNrYWdlIiwidXBkYXRlLWZlZWRiYWNrYXBwIiwidmlldy1yaXNrLW1hbmFnZW1lbnQtZGFzaGJvYXJkIiwibWFuYWdlLWFkdmFuY2VkLXRyaWFnZS1zZXR0aW5nIiwidmlldy1wcm9qZWN0LXBhcmFtcyIsImRlbGV0ZS1wb29sIiwiY3JlYXRlLXBvb2wiLCJjcmVhdGUtc2NoZWR1bGUtc2NhbiIsImNyZWF0ZS1jbG91ZC1jb25uZWN0aW9ucyIsInVwZGF0ZS10ZW5hbnQtcGFyYW1zIiwidXBkYXRlLXNjYS1saWNlbnNlLXN0YXRlIiwiZG93bmxvYWQtc291cmNlLWNvZGUiLCJkYXN0LWNhbmNlbC1zY2FuIiwiZGFzdC12aWV3LWVudmlyb25tZW50cyIsImRlbGV0ZS1ydW50aW1lLWNsb3VkIiwiY3JlYXRlLWZlZWRiYWNrYXBwIiwidXBkYXRlLXBhY2thZ2Utc3RhdGUtbXV0ZSIsInVwZGF0ZS1wb29sIiwiYWNjZXNzLWlhbSIsInZpZXctcmVzdWx0cyIsImRlbGV0ZS1zY2hlZHVsZS1zY2FuIiwiZGVsZXRlLWZlZWRiYWNrYXBwIiwidmlldy1kYXRhLXJldGVudGlvbiIsInVwZGF0ZS1yaXNrLW1hbmFnZW1lbnQiLCJjcmVhdGUtcnVudGltZS1jbG91ZCIsInVwZGF0ZS1yZXN1bHQiLCJ1cGRhdGUtcmVzdWx0LXN0YXRlcyIsInVwZGF0ZS1wb2xpY3ktbWFuYWdlbWVudCIsInVwZGF0ZS1wcmVzZXQiLCJvdmVycmlkZS1wb2xpY3ktbWFuYWdlbWVudCIsInZpZXctcmlzay1tYW5hZ2VtZW50LXRhYiIsImRhc3QtdXBkYXRlLXJlc3VsdHMiLCJkZWxldGUtc2NtLWNvbmZpZ3VyYXRpb24iLCJkYXN0LWNyZWF0ZS1zY2FuIiwibWFuYWdlLWNuYXMiLCJkZWxldGUtcG9saWN5LW1hbmFnZW1lbnQiLCJ1cGRhdGUtYWNjZXNzIiwiYXN0LXZpZXdlciIsImFuYWx5dGljcy12dWxuZXJhYmlsaXR5LWRhc2hib2FyZC12aWV3IiwidXBkYXRlLXNjYS1saWNlbnNlLXByb3BlcnRpZXMiLCJtYW5hZ2UtZGF0YS1yZXRlbnRpb24iLCJkYXN0LXVwZGF0ZS1yZXN1bHQtc3RhdGVzIiwiZGVsZXRlLXByZXNldCIsInVwZGF0ZS1sb2NrZWQtc2NhbnMiLCJ2aWV3LWFwcGxpY2F0aW9ucyIsInZpZXctbGljZW5zZSIsIm1hbmFnZS12dWxuZXJhYmlsaXR5LWFzc2lnbmVlcyIsInVwZGF0ZS1wYWNrYWdlLXN0YXRlLXNub296ZSIsInVwZGF0ZS1yZXN1bHQtc3RhdGUtcHJvcG9zZS1ub3QtZXhwbG9pdGFibGUiLCJkYXN0LXVwZGF0ZS1yZXN1bHQtc3RhdGUtcHJvcG9zZS1ub3QtZXhwbG9pdGFibGUiLCJvcmRlci1zZXJ2aWNlcyIsImFuYWx5dGljcy1yZXBvcnRzLWFkbWluIiwiZGFzdC11cGRhdGUtZW52aXJvbm1lbnQiLCJkYXN0LWRlbGV0ZS1lbnZpcm9ubWVudCIsInZpZXctY29udHJpYnV0b3JzIiwiYXN0LWFkbWluIiwidXBkYXRlLXdlYmhvb2siLCJtYW5hZ2UtYXBwbGljYXRpb24iLCJzZW5kLXJlcG9ydC1lbWFpbCJdLCJuYW1lIjoiU29yYWtpdGggTWFydWVrYXNvbnRoaSIsInRlbmFudC10eXBlIjoiVHJpYWwiLCJhc3QtbGljZW5zZSI6eyJJRCI6NzI3NywiVGVuYW50SUQiOiIxNzA1ZTM0ZS05YjkwLTRhNGItYmZhMC01ZDYzMTY4MmM0ODgiLCJJc0FjdGl2ZSI6dHJ1ZSwiUGFja2FnZUlEIjo3MywiTGljZW5zZURhdGEiOnsiYWN0aXZhdGlvbkRhdGUiOjE3MTMyMzk1MDczNTksImFsbG93ZWRFbmdpbmVzIjpbIlNBU1QiLCJBUEkgU2VjdXJpdHkiLCJTQ0EiLCJBcHBsaWNhdGlvbiBSaXNrIE1hbmFnZW1lbnQiLCJDb250YWluZXJzIiwiREFTVCIsIk1hbGljaW91cyBQYWNrYWdlcyIsIlNDUyIsIktJQ1MiLCJFbnRlcnByaXNlIFNlY3JldHMiLCJDb2RlYmFzaGluZyIsIkNsb3VkIEluc2lnaHRzIiwiQ2hlY2ttYXJ4IE9uZSBBc3Npc3QiLCJTZWNyZXQgRGV0ZWN0aW9uIiwiUmVwb3NpdG9yeSBIZWFsdGgiLCJBSSBQcm90ZWN0aW9uIl0sImFwaVNlY3VyaXR5RW5hYmxlZCI6dHJ1ZSwiY29kZUJhc2hpbmdFbmFibGVkIjp0cnVlLCJjb2RlQmFzaGluZ1VybCI6Imh0dHBzOi8vbmZyLWZ1c2lvbmFkdmFudGVjLXNnLmNvZGViYXNoaW5nLmNvbSIsImNvZGVCYXNoaW5nVXNlcnNDb3VudCI6MTAsImN1c3RvbU1heENvbmN1cnJlbnRTY2Fuc0VuYWJsZWQiOnRydWUsImRhc3RFbmFibGVkIjp0cnVlLCJleHBpcmF0aW9uRGF0ZSI6MTczNTYxNzA2MDAwMCwiZmVhdHVyZXMiOlsiU1NPIl0sImxhc3RDb21tZW50TGltaXQiOjkwLCJtYXhDb25jdXJyZW50U2NhbnMiOjUsIm1heFF1ZXVlZFNjYW5zIjoxMDAwLCJyZXRlbnRpb25QZXJpb2QiOjM2NSwic2NzRW5hYmxlZCI6dHJ1ZSwic2VydmljZVR5cGUiOiJTdGFuZGFyZCIsInNlcnZpY2VzIjpbIjAgQXBwc2VjIEhlbHBkZXNrIEFzc2lzdGFuY2UiLCIwIE9wdGltaXphdGlvbiBTZXJ2aWNlIE9yZGVyIl0sInVubGltaXRlZFByb2plY3RzIjp0cnVlLCJ1c2Vyc0NvdW50IjoyNTB9LCJQYWNrYWdlTmFtZSI6IkN4T25lIEVudGVycHJpc2UifSwic2VydmljZV91c2Vyc19lbmFibGVkIjp0cnVlLCJmYW1pbHlfbmFtZSI6Ik1hcnVla2Fzb250aGkiLCJlbWFpbCI6InNvcmFraXRoQGZ1c2lvbi5jby50aCIsInRlbmFudCI6Im5mci1mdXNpb25hZHZhbnRlYy1zZyJ9.TRleJ-3ihP-xPpkYKXErRG-MRFvm4oMriZunafi_qVNXMyLEDq7gqmuncC7dI6BvfiN6Npypdg-mR7cPIK3bHhgdMsG9LoSQzSFi4iHsJs7f8SHlqO6wujF_PcPpgAaLfg09fJ5wxg97GZ_UxAMU0MHPnE5qW5D1QvfNlHOZNU5eyZoJyNytktwHsT96LLPeAuuNc6ygqItP21jhpVEYFTC20E4-MB5yZsKRx-1by1BzbdK1B0_V9nQvuB298cAvP3XaQyV5QWVhI4qpwXhhl_UdxEnDYajNg3GKkxfqKLpkTAVdiGhcPUMQLC5oEfVVnEGtF6JlRfsGSzKw8rzvow"
#           "https://sng.ast.checkmarx.net/api/sca/export/requests/c8645112-00c3-7350-97c1-31f7db0b2cfc/download"

#       # Step 3: Use the official 'upload-artifact' action to store the downloaded file.
#       # Artifacts are files or collections of files produced during a workflow run.
#       - name: Upload file as artifact
#         uses: actions/upload-artifact@v4
#         with:
#           # The name of the artifact to be uploaded.
#           name: downloaded-file-artifact
#           # The path to the file(s) to upload.
#           # In this case, it's the file we just downloaded.
#           path: sbom.json


# This workflow is for testing the Checkmarx login process.
# It can be triggered manually from the Actions tab in GitHub.
name: Checkmarx Scan and SBOM Export

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read
  actions: read
  security-events: write # Required for uploading SARIF results

jobs:
  checkmarx-and-export-sbom:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository's code
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Run Checkmarx One Scan. We no longer need its output directly.
      - name: Checkmarx One Scan
        uses: checkmarx/ast-github-action@main
        with:
          project_name: ${{ github.event.repository.name }}
          cx_tenant: nfr-fusionadvantec-sg
          base_uri: https://sng.ast.checkmarx.net/
          cx_client_id: ${{ secrets.CX_CLIENT_ID }}
          cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
          additional_params: >-
            --report-format sarif
            --output-path .
            --output-name cx_result

      # Step 3: Upload the SARIF file to GitHub Code Scanning
      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: cx_result.sarif

      # Step 4: Upload the SARIF file as a downloadable artifact
      - name: Upload Checkmarx SARIF (artifact)
        if: ${{ always() && hashFiles('cx_result.sarif') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: SARIF-Checkmarx
          path: cx_result.sarif
          retention-days: 30

      # --- SBOM Export Steps ---

      # Step 5: Log in to Checkmarx using a refresh token
      - name: Login to Checkmarx for API Calls
        id: cx-login
        run: |
          echo "Attempting to get access token for API calls..."
          TOKEN_RESPONSE=$(curl --silent --location 'https://sng.iam.checkmarx.net/auth/realms/nfr-fusionadvantec-sg/protocol/openid-connect/token' \
          --header 'Content-Type: application/x-www-form-urlencoded' \
          --data-urlencode 'grant_type=refresh_token' \
          --data-urlencode 'client_id=ast-app' \
          --data-urlencode 'refresh_token=${{ secrets.CX_REFRESH_TOKEN }}')
          
          if echo "$TOKEN_RESPONSE" | jq -e '.access_token' > /dev/null; then
            echo "✅ Login successful! Storing token."
            ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r .access_token)
            echo "token=${ACCESS_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "❌ Login failed!"
            echo "Response from server: $TOKEN_RESPONSE"
            exit 1
          fi

      # Step 6: Get the latest Scan ID for the project via API
      - name: Get Latest Scan ID via API
        id: get-scan-id
        run: |
          PROJECT_NAME="${{ github.event.repository.name }}"
          echo "Fetching Project ID for project: $PROJECT_NAME"
          
          PROJECT_RESPONSE=$(curl --silent -X GET "https://sng.ast.checkmarx.net/api/projects?name=${PROJECT_NAME}" \
            --header 'Authorization: Bearer ${{ steps.cx-login.outputs.token }}')
          
          PROJECT_ID=$(echo "$PROJECT_RESPONSE" | jq -r '.projects[0].id')
          
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
            echo "::error::Could not find Project ID for project '$PROJECT_NAME'. Response: $PROJECT_RESPONSE"
            exit 1
          fi
          echo "✅ Found Project ID: $PROJECT_ID"

          echo "Fetching latest scan for Project ID using /last-scan endpoint: $PROJECT_ID"
          LAST_SCAN_RESPONSE=$(curl --silent -X GET "https://sng.ast.checkmarx.net/api/projects/last-scan?project-ids=${PROJECT_ID}&limit=1" \
            --header 'Authorization: Bearer ${{ steps.cx-login.outputs.token }}')

          # Use 'try' to handle non-array/unexpected responses gracefully
          SCAN_ID=$(echo "$LAST_SCAN_RESPONSE" | jq -r 'try .[0].id')

          if [ -z "$SCAN_ID" ] || [ "$SCAN_ID" == "null" ]; then
            echo "::error::Could not find latest Scan ID using /last-scan endpoint. Response: $LAST_SCAN_RESPONSE"
            exit 1
          fi
          
          echo "✅ Found latest Scan ID: $SCAN_ID"
          echo "scan-id=${SCAN_ID}" >> $GITHUB_OUTPUT

      # Step 7: Request the SCA Export using the extracted Scan ID
      - name: Request SCA Export (SBOM)
        id: sca-export-request
        run: |
          echo "Requesting SCA Export for Scan ID: ${{ steps.get-scan-id.outputs.scan-id }}"
          EXPORT_RESPONSE=$(curl --silent --location 'https://sng.ast.checkmarx.net/api/sca/export/requests' \
          --header 'Authorization: Bearer ${{ steps.cx-login.outputs.token }}' \
          --header 'Content-Type: application/json' \
          --data '{
              "scanId":"${{ steps.get-scan-id.outputs.scan-id }}",
              "fileFormat": "CycloneDxJson"
          }')

          if echo "$EXPORT_RESPONSE" | jq -e '.exportId' > /dev/null; then
            echo "✅ Export request successful!"
            EXPORT_ID=$(echo "$EXPORT_RESPONSE" | jq -r .exportId)
            echo "Export ID received: $EXPORT_ID"
            echo "exportId=${EXPORT_ID}" >> $GITHUB_OUTPUT
          else
            echo "❌ Export request failed!"
            echo "Response from server: $EXPORT_RESPONSE"
            exit 1
          fi

      # Step 8: Wait and then get the file URL for the exported report
      - name: Get Export Status and File URL
        id: get-file-url
        run: |
          echo "Waiting 15 seconds for the export to be ready..."
          sleep 15
          echo "Checking export status for ID: ${{ steps.sca-export-request.outputs.exportId }}"
          STATUS_RESPONSE=$(curl --silent --location 'https://sng.ast.checkmarx.net/api/sca/export/requests?exportId=${{ steps.sca-export-request.outputs.exportId }}' \
          --header 'Authorization: Bearer ${{ steps.cx-login.outputs.token }}')

          FILE_URL=$(echo "$STATUS_RESPONSE" | jq -r .fileUrl)
          if [ -n "$FILE_URL" ] && [ "$FILE_URL" != "null" ]; then
            echo "✅ File URL is ready!"
            echo "fileUrl=${FILE_URL}" >> $GITHUB_OUTPUT
          else
            echo "⚠️ File URL not ready yet or request failed. The report might still be generating."
            echo "Full response: $STATUS_RESPONSE"
            echo "fileUrl=" >> $GITHUB_OUTPUT
          fi

      # Step 9: Download the CycloneDX report file
      - name: Download CycloneDX Report
        if: steps.get-file-url.outputs.fileUrl != ''
        run: |
          echo "Downloading report from URL..."
          curl --silent --location "${{ steps.get-file-url.outputs.fileUrl }}" \
          --header 'Authorization: Bearer ${{ steps.cx-login.outputs.token }}' \
          -o cyclonedx-report.json
          echo "✅ Download complete. Saved as cyclonedx-report.json"

      # Step 10: Upload the CycloneDX report as a pipeline artifact
      - name: Upload CycloneDX Report as Artifact
        if: ${{ always() && hashFiles('cyclonedx-report.json') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: CycloneDX-Report
          path: cyclonedx-report.json
          retention-days: 30

