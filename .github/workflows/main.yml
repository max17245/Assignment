# name: Checkmarx One Scan
# on:
#   push:
#     branches:
#       - main
#       - master
#       - dev
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Checkmarx One CLI Action
#         uses: checkmarx/ast-github-action@main #Github Action version
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/ 
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}

##########
# name: Checkmarx → GitHub Code Scanning

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write   # ต้องมีเพื่ออัปโหลด SARIF

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) รัน Checkmarx One และให้สร้างไฟล์ SARIF
#       - name: Checkmarx One CLI
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           # จุดสำคัญ: สั่ง CLI ให้สร้างรายงาน SARIF ที่ชื่อ cx_result.sarif ไว้ในรูทของ workspace
#           additional_params: >-
#             --report-format sarif
#             --output-path .
#             --output-name cx_result

#       # 2) อัปโหลดไฟล์ SARIF ไปที่ GitHub Code Scanning
#       - name: Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       # 3) อัปโหลดไฟล์ SARIF เป็น Artifact (ให้โหลดลงเครื่องได้)
#       - name: Upload Checkmarx SARIF (artifact)
#         if: ${{ always() && hashFiles('cx_result.sarif') != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SARIF-Checkmarx
#           path: cx_result.sarif
#           retention-days: 30


##############
# name: Checkmarx → GitHub Code Scanning + SBOM (CycloneDX & SPDX)

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write   # สำหรับอัปโหลด SARIF เข้าหน้า Code scanning

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) สแกนและสร้าง SARIF สำหรับ GitHub Code Scanning
#       - name: Checkmarx One CLI (SARIF)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --report-format sarif
#             --output-path .
#             --output-name cx_result

#       - name: Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       - name: Upload Checkmarx SARIF (artifact)
#         if: ${{ always() && hashFiles('cx_result.sarif') != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SARIF-Checkmarx
#           path: cx_result.sarif
#           retention-days: 30

#   # 2) สร้าง SBOM สองฟอร์แมตด้วย matrix: CycloneDxJson และ SpdxJson
#   sbom:
#     needs: checkmarx
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         fmt: [ CycloneDxJson, SpdxJson ]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Checkmarx One CLI (SBOM - ${{ matrix.fmt }})
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --report-format sbom
#             --report-sbom-format ${{ matrix.fmt }}
#             --output-path .
#             --output-name sbom-${{ matrix.fmt }}

#       - name: Upload SBOM (artifact) - ${{ matrix.fmt }}
#         if: ${{ always() && hashFiles(format('sbom-{0}.json', matrix.fmt)) != '' }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: SBOM-${{ matrix.fmt }}
#           path: sbom-${{ matrix.fmt }}.json
#           retention-days: 30

############
# name: Checkmarx → Code Scanning + SBOM

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# permissions:
#   contents: read
#   actions: read
#   security-events: write

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       # 1) สแกนและสร้าง SARIF
#       - name: Checkmarx One CLI (SARIF)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sarif
#             --output-path $GITHUB_WORKSPACE
#             --output-name cx_result

#       - name: Post Upload SARIF to Code Scanning
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: cx_result.sarif

#       # 2) สร้าง SBOM: CycloneDX JSON
#       - name: SBOM (CycloneDX JSON)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sbom
#             --report-sbom-format CycloneDxJson
#             --output-path $GITHUB_WORKSPACE
#             --output-name sbom-cyclonedx

#       # 3) สร้าง SBOM: SPDX JSON
#       - name: SBOM (SPDX JSON)
#         uses: checkmarx/ast-github-action@main
#         with:
#           project_name: fluk-test
#           cx_tenant: nfr-fusionadvantec-sg
#           base_uri: https://sng.ast.checkmarx.net/
#           cx_client_id: ${{ secrets.CX_CLIENT_ID }}
#           cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
#           additional_params: >-
#             --scan-types sca
#             --report-format sbom
#             --report-sbom-format SpdxJson
#             --output-path $GITHUB_WORKSPACE
#             --output-name sbom-spdx

#       # 4) แสดงไฟล์ที่ได้ (เพื่อดีบั๊กชื่อ/พาธ)
#       - name: List generated files
#         run: |
#           echo "PWD: $(pwd)"
#           ls -la
#           echo "---- find sbom files ----"
#           find . -maxdepth 2 -type f -name "sbom-*" -o -name "cx_result.*" -print

#       # 5) อัปโหลด Artifact (ไม่ต้องใช้ hashFiles, ใช้ always + wildcard)
#       # - name: Upload SBOM & SARIF Artifacts
#       #   if: ${{ always() }}
#       #   uses: actions/upload-artifact@v4
#       #   with:
#       #     name: Checkmarx-Reports
#       #     path: |
#       #       cx_result.sarif
#       #       sbom-cyclonedx.json
#       #       sbom-spdx.json
#       #     retention-days: 30
#       - name: Upload SBOM & SARIF Artifacts
#         if: ${{ always() }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: Checkmarx-Reports
#           path: |
#             cx_result.sarif
#             sbom-*_sbom.json
#           retention-days: 30


name: Checkmarx → Code Scanning + SBOM (use same scan id)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  checkmarx:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) สแกนและสร้าง SARIF
      - name: Checkmarx One CLI (SARIF)
        id: checkmarx_scan
        uses: checkmarx/ast-github-action@main
        with:
          project_name: fluk-test
          cx_tenant: nfr-fusionadvantec-sg
          base_uri: https://sng.ast.checkmarx.net/
          cx_client_id: ${{ secrets.CX_CLIENT_ID }}
          cx_client_secret: ${{ secrets.CX_CLIENT_SECRET }}
          additional_params: >-
            --scan-types sca
            --report-format sarif
            --output-path $GITHUB_WORKSPACE
            --output-name cx_result
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: cx_result.sarif

      # 2) ดึง Scan ID ล่าสุดจาก Checkmarx (project+branch)
      - name: Get Scan ID from last run
        id: get_scan_id
        env:
          CX_BASE_URI: https://sng.ast.checkmarx.net/
          CX_TENANT: nfr-fusionadvantec-sg
          CX_CLIENT_ID: ${{ secrets.CX_CLIENT_ID }}
          CX_CLIENT_SECRET: ${{ secrets.CX_CLIENT_SECRET }}
          PROJECT: fluk-test
          BRANCH: ${{ github.ref_name }}
        run: |
          docker pull checkmarx/ast-cli:latest
          CONFIG_DIR=$(pwd)/.cx-config
          mkdir -p "$CONFIG_DIR"

          # Login
          docker run --rm -v "$CONFIG_DIR":/root/.cx \
            checkmarx/ast-cli:latest auth login \
              --client-id "$CX_CLIENT_ID" \
              --client-secret "$CX_CLIENT_SECRET" \
              --tenant "$CX_TENANT" \
              --base-uri "$CX_BASE_URI"

          # Query scans
          SCAN_ID=$(docker run --rm -v "$CONFIG_DIR":/root/.cx \
            checkmarx/ast-cli:latest results list \
              --project-name "$PROJECT" \
              --branch "$BRANCH" \
              --format json | jq -r '.[0].scanId // empty')

          if [ -z "$SCAN_ID" ]; then
            echo "::error::No previous scan found"
            exit 1
          fi
          echo "SCAN_ID=$SCAN_ID"
          echo "scan_id=$SCAN_ID" >> $GITHUB_OUTPUT

      # 3) ใช้ Scan ID เพื่อสร้าง SBOM (CycloneDX)
      - name: Generate SBOM (CycloneDX)
        env:
          CX_BASE_URI: https://sng.ast.checkmarx.net/
          CX_TENANT: nfr-fusionadvantec-sg
          CX_CLIENT_ID: ${{ secrets.CX_CLIENT_ID }}
          CX_CLIENT_SECRET: ${{ secrets.CX_CLIENT_SECRET }}
          SCAN_ID: ${{ steps.get_scan_id.outputs.scan_id }}
        run: |
          CONFIG_DIR=$(pwd)/.cx-config
          docker run --rm -v "$CONFIG_DIR":/root/.cx -v "$(pwd)":/work -w /work \
            checkmarx/ast-cli:latest results show \
              --scan-id "$SCAN_ID" \
              --report-format sbom \
              --report-sbom-format CycloneDxJson \
              --output-path . \
              --output-name sbom-cyclonedx

      # 4) ใช้ Scan ID เพื่อสร้าง SBOM (SPDX)
      - name: Generate SBOM (SPDX)
        env:
          CX_BASE_URI: https://sng.ast.checkmarx.net/
          CX_TENANT: nfr-fusionadvantec-sg
          CX_CLIENT_ID: ${{ secrets.CX_CLIENT_ID }}
          CX_CLIENT_SECRET: ${{ secrets.CX_CLIENT_SECRET }}
          SCAN_ID: ${{ steps.get_scan_id.outputs.scan_id }}
        run: |
          CONFIG_DIR=$(pwd)/.cx-config
          docker run --rm -v "$CONFIG_DIR":/root/.cx -v "$(pwd)":/work -w /work \
            checkmarx/ast-cli:latest results show \
              --scan-id "$SCAN_ID" \
              --report-format sbom \
              --report-sbom-format SpdxJson \
              --output-path . \
              --output-name sbom-spdx

      # 5) แสดงไฟล์ทั้งหมด
      - name: List generated files
        run: |
          echo "PWD: $(pwd)"
          ls -la
          echo "---- find sbom files ----"
          find . -maxdepth 2 -type f -name "sbom-*" -o -name "cx_result.*" -print

      # 6) อัปโหลดเป็น Artifact
      - name: Upload Reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: Checkmarx-Reports
          path: |
            cx_result.sarif
            sbom-cyclonedx_sbom.json
            sbom-spdx_sbom.json
          retention-days: 30
